import random, operator, copy, math, time
from itertools import groupby

M = 16

def initial_population(mapper1, population, popSize):
    pop = []
    for i in range(len(population)):
        pop.append(population[i])
    for i in range(popSize):
        m1 = mapper1.copy()
        random.shuffle(m1)
        pop.append(m1)
    return list(tuple(pop))

def mappoints(map, mapper):
    mapped = {}
    for i in range(len(mapper)):
        for j in map.keys():
            if j == mapper[i]:
                #print(mapper[i], map.get(i))
                mapped[j] = map.get(i)
    return mapped

def fitness(list1, list2, map):
    list3 = []
    list1, list2 = mappoints(map, list1), mappoints(map, list2)
    for i in range(len(list1)):
        for j in range(len(list2)):
            if i != j:
                fit = abs(list1[i]-list1[j]) * abs(list2[i]-list2[j])
                list3.append(fit)
    return round(min(list3),4)

def rank_fitness(gray, population, map):
    rFit = {}
    for i in range(len(population)):
        rFit[i] = fitness(gray, population[i], map)
    return sorted(rFit.items(), key=operator.itemgetter(1), reverse=True)

def Keeping_best_chromosomes(mapper1, population, map):
    rank = rank_fitness(mapper1, population, map)
    best = rank[0][1]
    keep = []
    for i in range(len(population)):
        if fitness(mapper1, population[i], map) == best:
            keep.append(list(population[i]).copy())
            #if len(keep) == len(list(population))/2: break
    return keep


def remove_duplicates(ls):
    # groupby needs ls to be sorted first
    new = sorted(ls)
    return list(key for key,val in groupby(new))

def ls1_setminus_ls2(ls1, ls2):
    ls2_set = set(ls2)
    return [item for item in ls1 if item not in ls2]

def davis_xover(x, y, i, j):
    # Init
    z = []
    length = len(x)
    xover_sect = x[i:j+1] # [i, j + 1) = [i, j]
    # Main
    fillers = ls1_setminus_ls2(y, xover_sect)
    for at in range(length):
        # copy xover section
        if i <= at <= j:
            z.insert(at, x[at])
        # use fillers
        else:
            filler = fillers.pop(0) # pop returns 1st elem and deletes it.
            z.insert(at, filler)
    return z

def all_davis_xover(x, y):
    oll = []
    length = len(x)

    for i in range(0, length):
        for j in range(i, length):
            z1 = davis_xover(x, y, i, j)
            z2 = davis_xover(y, x, i, j)
            oll.append(z1)
            oll.append(z2)

    return remove_duplicates(oll)

def crossover_chromosomes(parents, point_of_crossover):
    father, mother = parents
    child_a, child_b = copy.copy(father), copy.copy(mother)
    # Change chromosome
    for index in range(point_of_crossover):
        # Values on index
        value_a = child_a[index]
        value_b = child_b[index]
        # Values for swap
        index_of_value_b_in_a = child_a.index(value_b)
        index_of_value_a_in_b = child_b.index(value_a)
        # Save values
        child_a[index_of_value_b_in_a] = value_a
        child_b[index_of_value_a_in_b] = value_b
        # Change values
        child_a[index] = value_b
        child_b[index] = value_a
    return child_a, child_b

def crossoverPopulation(population):
    crossed = []
    for i in range(len(population)):
        for j in range(len(population)):
            crossed.append(crossover_chromosomes([population[i], population[j]], 8))
    return crossed


def mutation(child, rate):
    if random.random() < rate:
        i = random.randint(0, len(child)-1)
        j = random.randint(0, len(child)-1)

        child[i], child[j] = child[j], child[i]
    return child

def mutatePopulation(children, rate):
    mutated = []
    for i in range(len(children)):
        for j in range(len(children[i])):
            mutated.append(mutation(children[i][j], rate))
    return mutated

def entire_neighbourhood(chromosome):
    neighbours = []
    for i in range(len(chromosome)):
        #for j in range(len(chromosome)):
            c = chromosome.copy()
            j = random.randint(0,15)
            c[i], c[j] = c[j], c[i]
            neighbours.append(c)
    return neighbours

def population_neighbours(population):
    neighbours = []
    for i in range(len(population)):
        neighbours.append(entire_neighbourhood(population[i]))
    return neighbours


def tabu_search(population):
    searched = []
    for i in range(len(population)):
        #for j in range(len(population)):
            searched.append(mutation(population[i], 1))
    return searched

def AddToPopulation(parents, children, best, neighbours, AddedPop):
    for i in range(len(parents)):
        AddedPop.append(parents[i])
    for i in range(len(children)):
        AddedPop.append(children[i])
    for i in range(len(best)):
        AddedPop.append(best[i])
    for i in range(len(neighbours)):
        AddedPop.append(neighbours)
    return AddedPop


def nextGeneration(gray, population, popSize, map):
    newPop = []
    rank = rank_fitness(gray, population, map)
    for i in range(popSize):
        newPop.append(population[rank[i][0]])
    return newPop

map = {
0:complex(1,0), 1:complex(0.9239,0.3827), 2:complex(0.3827,0.9239), 3:complex(0.707,0.707),
4:complex(-0.9239,0.3827), 5:complex(-0.707,0.707), 6:complex(0,1), 7:complex(-0.3827,0.9239),
8:complex(0.9239,-0.3827), 9:complex(0.707,-0.707), 10:complex(0,-1), 11:complex(0.3827,-0.9239),
12:complex(-1,0), 13:complex(-0.9239,-0.3827), 14:complex(-0.3827,-0.9239), 15:complex(-0.707,-0.707)
}

mapper3 = [12,1,7,9,15,5,3,13,11,6,0,2,14,4,8,10]
mapper2 = [0,13,14,3,8,5,6,11,4,9,10,7,12,1,2,15]
mapper1 = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]

maps = [mapper1, mapper2,mapper3]
print(fitness(mapper1, mapper1, map))
#print(fitness(mapper1, mapper2, map))

print("Enter population size")
popsize = int(input())
print("Enter mutation rate")
mutRate = float(input())

Maps = initial_population(mapper1,maps,popsize)
A = []
i=0
f = open("16PSKNew.txt", "a")
f.write(str(fitness(mapper1, mapper1,map)))
f.write("\n")
f.close()
start_time = time.time()
while fitness(mapper1, Maps[0], map) <= 8.0:
    i = i + 1
    if i == 1001: break
    best = Keeping_best_chromosomes(mapper1, Maps, map)
    C = crossoverPopulation(Maps)
    print(len(C))
    M = mutatePopulation(C, mutRate)
    A = AddToPopulation(Maps, M, best, [], A)
    Maps = nextGeneration(mapper1, A, popsize, map)
    end_time = time.time()
    Time = end_time - start_time
    print(Maps)
    print(rank_fitness(mapper1, Maps, map))
    print("Generation", i)
    A = []
    f = open("16PSKNew.txt", "a")
    x = str("Generation " + str(i) + " best fitness " +  str(fitness(mapper1, Maps[0], map)) + " Time: " + str(Time))
    f.write(x)
    f.write("\n")
    f.close()



"""
[[7, 4, 12, 10, 22, 25, 18, 3, 20, 9, 5, 21, 6, 29, 17, 27, 1, 30, 8, 26, 23, 15, 28, 14, 11, 19, 13, 2, 16, 0, 24, 31], [7, 4, 12, 10, 16, 25, 18, 3, 20, 9, 5, 21, 6, 29, 27, 1, 22, 30, 8, 26, 23, 15, 11, 14, 28, 19, 13, 2, 31, 17, 0, 24], [7, 4, 12, 10, 31, 25, 18, 3, 20, 9, 5, 21, 6, 27, 29, 22, 1, 23, 15, 8, 26, 14, 28, 30, 11, 19, 13, 2, 16, 0, 24, 17], [7, 4, 12, 10, 31, 25, 18, 3, 20, 9, 5, 21, 6, 29, 22, 27, 1, 23, 15, 8, 26, 30, 28, 14, 11, 19, 13, 2, 16, 0, 24, 17], [7, 4, 12, 10, 22, 25, 18, 3, 20, 9, 5, 21, 6, 31, 29, 27, 1, 15, 8, 26, 23, 14, 28, 30, 11, 19, 13, 2, 16, 0, 24, 17], [7, 4, 12, 10, 22, 25, 18, 3, 20, 9, 5, 21, 6, 31, 29, 27, 1, 15, 8, 26, 23, 14, 28, 30, 11, 19, 13, 2, 16, 0, 24, 17], [7, 4, 12, 10, 22, 30, 18, 3, 20, 9, 5, 21, 6, 29, 17, 27, 1, 25, 8, 26, 23, 15, 28, 14, 11, 19, 13, 2, 16, 0, 31, 24], [7, 4, 12, 10, 22, 25, 18, 3, 20, 9, 5, 21, 6, 29, 17, 27, 1, 30, 8, 26, 23, 15, 28, 14, 11, 19, 13, 2, 16, 0, 31, 24], [7, 4, 12, 10, 31, 25, 28, 3, 20, 9, 5, 21, 6, 27, 29, 22, 1, 14, 8, 26, 23, 15, 18, 30, 11, 19, 13, 2, 16, 0, 24, 17], [7, 4, 12, 10, 31, 25, 18, 3, 20, 9, 5, 21, 6, 27, 29, 22, 1, 23, 15, 8, 26, 14, 28, 30, 11, 19, 13, 2, 16, 0, 17, 24], [7, 4, 12, 10, 31, 25, 18, 3, 20, 9, 5, 21, 6, 29, 27, 22, 1, 23, 15, 8, 26, 14, 28, 30, 11, 19, 13, 2, 16, 0, 24, 17], [7, 4, 12, 10, 22, 25, 18, 3, 20, 9, 5, 21, 6, 29, 17, 27, 1, 30, 8, 26, 23, 15, 28, 14, 11, 19, 13, 2, 16, 0, 31, 24], [7, 4, 12, 10, 27, 25, 18, 3, 20, 9, 5, 21, 6, 29, 22, 31, 1, 23, 15, 8, 26, 30, 28, 14, 11, 19, 13, 2, 16, 0, 24, 17], [7, 4, 12, 10, 22, 25, 18, 3, 20, 9, 5, 21, 6, 29, 17, 28, 1, 30, 8, 26, 23, 15, 27, 14, 11, 19, 13, 2, 16, 0, 24, 31], [7, 4, 12, 10, 22, 24, 18, 3, 20, 9, 5, 21, 6, 29, 31, 27, 1, 15, 8, 26, 23, 14, 28, 30, 11, 19, 13, 2, 16, 0, 25, 17], [7, 4, 12, 10, 22, 25, 18, 3, 20, 9, 5, 21, 6, 31, 17, 27, 1, 30, 8, 26, 23, 15, 28, 14, 11, 19, 13, 2, 16, 0, 29, 24], [7, 4, 12, 10, 31, 25, 18, 3, 20, 9, 5, 21, 6, 29, 17, 27, 1, 23, 15, 8, 26, 14, 28, 30, 11, 19, 13, 2, 16, 0, 24, 22], [7, 4, 12, 10, 31, 25, 18, 3, 20, 9, 5, 21, 6, 29, 17, 27, 23, 1, 15, 8, 26, 14, 28, 30, 11, 19, 13, 2, 16, 24, 0, 22], [7, 4, 12, 10, 22, 25, 18, 3, 20, 23, 5, 21, 6, 29, 17, 27, 1, 30, 8, 26, 9, 15, 28, 14, 11, 19, 13, 2, 16, 0, 31, 24], [7, 4, 12, 10, 31, 25, 18, 3, 20, 9, 5, 21, 6, 29, 17, 27, 1, 23, 15, 8, 26, 14, 28, 30, 11, 19, 13, 2, 16, 22, 24, 0], [7, 4, 12, 10, 22, 25, 18, 3, 20, 9, 5, 21, 6, 29, 17, 1, 27, 8, 30, 26, 23, 15, 28, 14, 11, 19, 13, 2, 16, 0, 24, 31], [7, 4, 12, 10, 17, 25, 3, 18, 20, 9, 5, 21, 6, 29, 31, 22, 1, 14, 8, 26, 23, 15, 11, 28, 30, 19, 13, 2, 16, 0, 24, 27], [7, 4, 12, 10, 22, 25, 18, 3, 20, 9, 5, 21, 6, 29, 17, 27, 1, 14, 8, 26, 23, 15, 11, 28, 30, 19, 13, 2, 16, 0, 24, 31], [7, 4, 12, 10, 22, 25, 18, 3, 20, 9, 5, 21, 6, 29, 17, 27, 1, 30, 8, 26, 23, 15, 28, 14, 11, 19, 13, 2, 16, 0, 24, 31], [7, 4, 12, 10, 22, 25, 18, 3, 20, 9, 5, 21, 6, 29, 17, 27, 1, 30, 8, 26, 23, 14, 11, 31, 28, 19, 13, 2, 16, 0, 15, 24]]
[(0, 0.378), (1, 0.378), (2, 0.378), (3, 0.378), (4, 0.378), (5, 0.378), (6, 0.378), (7, 0.378), (8, 0.378), (9, 0.378), (10, 0.378), (11, 0.378), (12, 0.378), (13, 0.378), (14, 0.378), (15, 0.378), (16, 0.378), (17, 0.378), (18, 0.378), (19, 0.378), (20, 0.378), (21, 0.378), (22, 0.378), (23, 0.378), (24, 0.378)]

"""

"""
16APSK:
[12, 10, 13, 9, 15, 11, 14, 8, 6, 0, 3, 7, 1, 5, 4, 2], [12, 10, 13, 9, 15, 11, 14, 8, 6, 0, 3, 7, 1, 5, 4, 2], [15, 10, 9, 12, 8, 11, 14, 13, 1, 5, 7, 3, 6, 4, 0, 2]
0.5411
pop size: 50
mut rate: 0.9/0.09

11+5APSK
[[5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4], [5, 10, 14, 12, 2, 11, 1, 13, 6, 3, 9, 0, 8, 15, 7, 4]]
[(0, 0.6865), (1, 0.6865), (2, 0.6865), (3, 0.6865), (4, 0.6865), (5, 0.6865), (6, 0.6865), (7, 0.6865), (8, 0.6865), (9, 0.6865), (10, 0.6865), (11, 0.6865), (12, 0.6865), (13, 0.6865), (14, 0.6865), (15, 0.6865), (16, 0.6865), (17, 0.6865), (18, 0.6865), (19, 0.6865), (20, 0.6865), (21, 0.6865), (22, 0.6865), (23, 0.6865), (24, 0.6865), (25, 0.6865), (26, 0.6865), (27, 0.6865), (28, 0.6865), (29, 0.6865), (30, 0.6865), (31, 0.6865), (32, 0.6865), (33, 0.6865), (34, 0.6865), (35, 0.6865), (36, 0.6865), (37, 0.6865), (38, 0.6865), (39, 0.6865), (40, 0.6865), (41, 0.6865), (42, 0.6865), (43, 0.6865), (44, 0.6865), (45, 0.6865), (46, 0.6865), (47, 0.6865), (48, 0.6865), (49, 0.6865), (50, 0.6865), (51, 0.6865), (52, 0.6865), (53, 0.6865), (54, 0.6865), (55, 0.6865), (56, 0.6865), (57, 0.6865), (58, 0.6865), (59, 0.6865), (60, 0.6865), (61, 0.6865), (62, 0.6865), (63, 0.6865), (64, 0.6865), (65, 0.6865), (66, 0.6865), (67, 0.6865), (68, 0.6865), (69, 0.6865), (70, 0.6865), (71, 0.6865), (72, 0.6865), (73, 0.6865), (74, 0.6865), (75, 0.6865), (76, 0.6865), (77, 0.6865), (78, 0.6865), (79, 0.6865), (80, 0.6865), (81, 0.6865), (82, 0.6865), (83, 0.6865), (84, 0.6865), (85, 0.6865), (86, 0.6865), (87, 0.6865), (88, 0.6865), (89, 0.6865), (90, 0.6865), (91, 0.6865), (92, 0.6865), (93, 0.6865), (94, 0.6865), (95, 0.6865), (96, 0.6865), (97, 0.6865), (98, 0.6865), (99, 0.6865)]
pop size: 100
mut rate: 0.09/ 0.9

16APSK double sym
[14, 10, 5, 12, 3, 7, 1, 11, 15, 6, 2, 9, 13, 4, 0, 8], [14, 10, 5, 12, 3, 7, 1, 11, 15, 6, 2, 9, 13, 4, 0, 8], [14, 4, 11, 1, 6, 13, 9, 3, 15, 8, 5, 0, 12, 7, 2, 10]
0.3008
pop size = 100
mut rate = 0.9/0.09

16APSK single sym
[[4, 10, 1, 15, 8, 6, 13, 3, 12, 2, 9, 7, 0, 14, 5, 11], [4, 10, 1, 15, 8, 6, 13, 3, 12, 2, 9, 7, 0, 14, 5, 11], [4, 10, 1, 15, 8, 6, 13, 3, 12, 2, 9, 7, 0, 14, 5, 11], [4, 10, 1, 15, 8, 6, 13, 3, 12, 2, 9, 7, 0, 14, 5, 11], [4, 10, 1, 15, 8, 6, 13, 3, 12, 2, 9, 7, 0, 14, 5, 11], [4, 10, 1, 15, 8, 6, 13, 3, 12, 2, 9, 7, 0, 14, 5, 11], [4, 10, 1, 15, 8, 6, 13, 3, 12, 2, 9, 7, 0, 14, 5, 11], [4, 10, 1, 15, 8, 6, 13, 3, 12, 2, 9, 7, 0, 14, 5, 11], [4, 10, 1, 15, 8, 6, 13, 3, 12, 2, 9, 7, 0, 14, 5, 11], [4, 10, 1, 15, 8, 6, 13, 3, 12, 2, 9, 7, 0, 14, 5, 11], [4, 10, 1, 15, 8, 6, 13, 3, 12, 2, 9, 7, 0, 14, 5, 11], [4, 10, 1, 15, 8, 6, 13, 3, 12, 2, 9, 7, 0, 14, 5, 11], [4, 10, 1, 15, 8, 6, 13, 3, 12, 2, 9, 7, 0, 14, 5, 11], [4, 10, 1, 15, 8, 6, 13, 3, 12, 2, 9, 7, 0, 14, 5, 11], [4, 10, 1, 15, 8, 6, 13, 3, 12, 2, 9, 7, 0, 14, 5, 11], [4, 10, 1, 15, 8, 6, 13, 3, 12, 2, 9, 7, 0, 14, 5, 11], [4, 10, 1, 15, 8, 6, 13, 3, 12, 2, 9, 7, 0, 14, 5, 11], [4, 10, 1, 15, 8, 6, 13, 3, 12, 2, 9, 7, 0, 14, 5, 11], [4, 10, 1, 15, 8, 6, 13, 3, 12, 2, 9, 7, 0, 14, 5, 11], [4, 10, 1, 15, 8, 6, 13, 3, 12, 2, 9, 7, 0, 14, 5, 11], [4, 10, 1, 15, 8, 6, 13, 3, 12, 2, 9, 7, 0, 14, 5, 11], [4, 10, 1, 15, 8, 6, 13, 3, 12, 2, 9, 7, 0, 14, 5, 11], [4, 10, 1, 15, 8, 6, 13, 3, 12, 2, 9, 7, 0, 14, 5, 11], [4, 10, 1, 15, 8, 6, 13, 3, 12, 2, 9, 7, 0, 14, 5, 11], [4, 10, 1, 15, 8, 6, 13, 3, 12, 2, 9, 7, 0, 14, 5, 11], [4, 10, 1, 15, 8, 6, 13, 3, 12, 2, 9, 7, 0, 14, 5, 11], [4, 10, 1, 15, 8, 6, 13, 3, 12, 2, 9, 7, 0, 14, 5, 11], [4, 10, 1, 15, 8, 6, 13, 3, 12, 2, 9, 7, 0, 14, 5, 11], [4, 10, 1, 15, 8, 6, 13, 3, 12, 2, 9, 7, 0, 14, 5, 11], [4, 10, 1, 15, 8, 6, 13, 3, 12, 2, 9, 7, 0, 14, 5, 11], [4, 10, 1, 15, 8, 6, 13, 3, 12, 2, 9, 7, 0, 14, 5, 11], [4, 10, 1, 15, 8, 6, 13, 3, 12, 2, 9, 7, 0, 14, 5, 11], [4, 10, 1, 15, 8, 6, 13, 3, 12, 2, 9, 7, 0, 14, 5, 11], [4, 10, 1, 15, 8, 6, 13, 3, 12, 2, 9, 7, 0, 14, 5, 11], [4, 10, 1, 15, 8, 6, 13, 3, 12, 2, 9, 7, 0, 14, 5, 11], [4, 10, 1, 15, 8, 6, 13, 3, 12, 2, 9, 7, 0, 14, 5, 11], [4, 10, 1, 15, 8, 6, 13, 3, 12, 2, 9, 7, 0, 14, 5, 11], [4, 10, 1, 15, 8, 6, 13, 3, 12, 2, 9, 7, 0, 14, 5, 11], [4, 10, 1, 15, 8, 6, 13, 3, 12, 2, 9, 7, 0, 14, 5, 11], [4, 10, 1, 15, 8, 6, 13, 3, 12, 2, 9, 7, 0, 14, 5, 11], [4, 10, 1, 15, 8, 6, 13, 3, 12, 2, 9, 7, 0, 14, 5, 11], [4, 10, 1, 15, 8, 6, 13, 3, 12, 2, 9, 7, 0, 14, 5, 11], [4, 10, 1, 15, 8, 6, 13, 3, 12, 2, 9, 7, 0, 14, 5, 11], [4, 10, 1, 15, 8, 6, 13, 3, 12, 2, 9, 7, 0, 14, 5, 11], [4, 10, 1, 15, 8, 6, 13, 3, 12, 2, 9, 7, 0, 14, 5, 11], [4, 10, 1, 15, 8, 6, 13, 3, 12, 2, 9, 7, 0, 14, 5, 11], [4, 10, 1, 15, 8, 6, 13, 3, 12, 2, 9, 7, 0, 14, 5, 11], [4, 10, 1, 15, 8, 6, 13, 3, 12, 2, 9, 7, 0, 14, 5, 11], [4, 10, 1, 15, 8, 6, 13, 3, 12, 2, 9, 7, 0, 14, 5, 11], [4, 10, 1, 15, 8, 6, 13, 3, 12, 2, 9, 7, 0, 14, 5, 11], [4, 10, 1, 15, 8, 6, 13, 3, 12, 2, 9, 7, 0, 14, 5, 11], [4, 10, 1, 15, 8, 6, 13, 3, 12, 2, 9, 7, 0, 14, 5, 11], [4, 10, 1, 15, 8, 6, 13, 3, 12, 2, 9, 7, 0, 14, 5, 11], [4, 10, 1, 15, 8, 6, 13, 3, 12, 2, 9, 7, 0, 14, 5, 11], [4, 10, 1, 15, 8, 6, 13, 3, 12, 2, 9, 7, 0, 14, 5, 11], [4, 10, 1, 15, 8, 6, 13, 3, 12, 2, 9, 7, 0, 14, 5, 11], [4, 10, 1, 15, 8, 6, 13, 3, 12, 2, 9, 7, 0, 14, 5, 11], [4, 10, 1, 15, 8, 6, 13, 3, 12, 2, 9, 7, 0, 14, 5, 11], [4, 10, 1, 15, 8, 6, 13, 3, 12, 2, 9, 7, 0, 14, 5, 11], [4, 10, 15, 1, 6, 8, 3, 13, 12, 2, 9, 7, 0, 14, 5, 11], [4, 10, 1, 15, 6, 8, 3, 13, 12, 2, 9, 7, 14, 0, 11, 5], [4, 10, 1, 15, 6, 8, 3, 13, 12, 2, 9, 7, 14, 0, 11, 5], [4, 10, 1, 15, 6, 8, 3, 13, 12, 2, 9, 7, 14, 0, 11, 5], [4, 10, 1, 15, 6, 8, 3, 13, 12, 2, 9, 7, 14, 0, 11, 5], [4, 10, 15, 1, 6, 8, 3, 13, 12, 2, 9, 7, 0, 14, 5, 11], [4, 10, 1, 15, 6, 8, 3, 13, 12, 2, 9, 7, 14, 0, 11, 5], [4, 10, 15, 1, 6, 8, 3, 13, 12, 2, 9, 7, 0, 14, 5, 11], [4, 10, 1, 15, 6, 8, 3, 13, 12, 2, 9, 7, 14, 0, 11, 5], [4, 10, 1, 15, 6, 8, 3, 13, 12, 2, 9, 7, 14, 0, 11, 5], [4, 10, 15, 1, 6, 8, 3, 13, 12, 2, 9, 7, 0, 14, 5, 11], [4, 10, 15, 1, 6, 8, 3, 13, 12, 2, 9, 7, 0, 14, 5, 11], [4, 10, 1, 15, 6, 8, 3, 13, 12, 2, 9, 7, 14, 0, 11, 5], [4, 10, 15, 1, 6, 8, 3, 13, 12, 2, 9, 7, 0, 14, 5, 11], [4, 10, 1, 15, 8, 6, 13, 3, 12, 2, 9, 7, 14, 0, 11, 5], [4, 10, 1, 15, 6, 8, 3, 13, 12, 2, 9, 7, 14, 0, 11, 5], [4, 10, 1, 15, 6, 8, 3, 13, 12, 2, 9, 7, 14, 0, 11, 5], [4, 10, 15, 1, 6, 8, 3, 13, 12, 2, 9, 7, 0, 14, 5, 11], [4, 10, 1, 15, 6, 8, 3, 13, 12, 2, 9, 7, 14, 0, 11, 5], [4, 10, 1, 15, 6, 8, 3, 13, 12, 2, 9, 7, 14, 0, 11, 5], [10, 4, 15, 0, 6, 8, 2, 13, 12, 3, 9, 7, 1, 14, 5, 11], [10, 4, 15, 1, 6, 8, 3, 13, 12, 2, 9, 7, 0, 14, 5, 11], [4, 10, 1, 15, 8, 6, 13, 3, 12, 2, 9, 7, 14, 0, 11, 5], [4, 10, 1, 15, 6, 8, 3, 13, 12, 2, 9, 7, 14, 0, 11, 5], [10, 5, 15, 1, 7, 8, 3, 13, 12, 2, 9, 6, 0, 14, 4, 11], [4, 10, 1, 15, 8, 6, 13, 3, 2, 12, 7, 9, 14, 0, 11, 5], [4, 11, 1, 15, 9, 6, 13, 3, 2, 12, 7, 8, 14, 0, 10, 5], [4, 10, 1, 15, 6, 8, 3, 13, 12, 2, 9, 7, 14, 0, 11, 5], [4, 10, 1, 15, 8, 6, 13, 3, 2, 12, 7, 9, 14, 0, 11, 5], [5, 10, 15, 1, 7, 8, 3, 13, 12, 2, 9, 6, 0, 14, 4, 11], [4, 10, 1, 15, 8, 6, 13, 3, 12, 2, 9, 7, 14, 0, 11, 5], [4, 10, 15, 1, 6, 8, 3, 13, 12, 2, 9, 7, 0, 14, 5, 11], [4, 10, 1, 15, 8, 6, 13, 3, 2, 12, 7, 9, 14, 0, 11, 5], [5, 10, 15, 1, 7, 8, 3, 13, 12, 2, 9, 6, 0, 14, 4, 11], [4, 10, 1, 15, 6, 8, 3, 13, 12, 2, 9, 7, 14, 0, 11, 5], [4, 10, 1, 15, 6, 8, 3, 13, 12, 2, 9, 7, 14, 0, 11, 5], [4, 10, 1, 15, 6, 8, 3, 13, 12, 2, 9, 7, 14, 0, 11, 5], [4, 10, 1, 15, 6, 8, 3, 13, 12, 2, 9, 7, 14, 0, 11, 5], [4, 10, 1, 15, 8, 7, 13, 3, 2, 12, 6, 9, 14, 0, 11, 5], [5, 10, 15, 1, 7, 8, 3, 13, 12, 2, 9, 6, 0, 14, 4, 11], [4, 10, 1, 15, 6, 8, 3, 13, 12, 2, 9, 7, 14, 0, 11, 5]]
[(0, 0.4053), (1, 0.4053), (2, 0.4053), (3, 0.4053), (4, 0.4053), (5, 0.4053), (6, 0.4053), (7, 0.4053), (8, 0.4053), (9, 0.4053), (10, 0.4053), (11, 0.4053), (12, 0.4053), (13, 0.4053), (14, 0.4053), (15, 0.4053), (16, 0.4053), (17, 0.4053), (18, 0.4053), (19, 0.4053), (20, 0.4053), (21, 0.4053), (22, 0.4053), (23, 0.4053), (24, 0.4053), (25, 0.4053), (26, 0.4053), (27, 0.4053), (28, 0.4053), (29, 0.4053), (30, 0.4053), (31, 0.4053), (32, 0.4053), (33, 0.4053), (34, 0.4053), (35, 0.4053), (36, 0.4053), (37, 0.4053), (38, 0.4053), (39, 0.4053), (40, 0.4053), (41, 0.4053), (42, 0.4053), (43, 0.4053), (44, 0.4053), (45, 0.4053), (46, 0.4053), (47, 0.4053), (48, 0.4053), (49, 0.4053), (50, 0.4053), (51, 0.4053), (52, 0.4053), (53, 0.4053), (54, 0.4053), (55, 0.4053), (56, 0.4053), (57, 0.4053), (58, 0.4053), (59, 0.4016), (60, 0.4016), (61, 0.4016), (62, 0.4016), (63, 0.4016), (64, 0.4016), (65, 0.4016), (66, 0.4016), (67, 0.4016), (68, 0.4016), (69, 0.4016), (70, 0.4016), (71, 0.4016), (72, 0.4016), (73, 0.4016), (74, 0.4016), (75, 0.4016), (76, 0.4016), (77, 0.4016), (78, 0.4016), (79, 0.4016), (80, 0.4016), (81, 0.4016), (82, 0.4016), (83, 0.4016), (84, 0.4016), (85, 0.4016), (86, 0.4016), (87, 0.4016), (88, 0.4016), (89, 0.4016), (90, 0.4016), (91, 0.4016), (92, 0.4016), (93, 0.4016), (94, 0.4016), (95, 0.4016), (96, 0.4016), (97, 0.4016), (98, 0.4016), (99, 0.4016)]
pop size = 100
mut rate = 0.9/0.09

32APSK
[[16, 18, 27, 24, 14, 21, 19, 30, 28, 4, 26, 29, 5, 23, 11, 20, 3, 12, 2, 13, 22, 17, 31, 10, 0, 6, 9, 25, 7, 15, 8, 1], [16, 18, 25, 24, 14, 21, 19, 30, 28, 4, 26, 29, 5, 23, 7, 20, 3, 22, 2, 13, 12, 17, 31, 10, 0, 6, 9, 1, 27, 11, 15, 8], [16, 18, 25, 24, 14, 21, 19, 30, 28, 4, 26, 29, 5, 23, 7, 20, 3, 12, 2, 13, 22, 17, 31, 10, 0, 6, 9, 1, 27, 11, 15, 8], [16, 18, 25, 24, 14, 21, 19, 30, 28, 4, 26, 29, 5, 23, 7, 20, 3, 22, 2, 13, 12, 17, 31, 10, 0, 6, 9, 27, 11, 15, 8, 1], [16, 18, 27, 24, 14, 21, 19, 30, 28, 4, 26, 29, 5, 23, 11, 20, 3, 12, 2, 13, 22, 17, 31, 10, 0, 6, 9, 25, 7, 15, 8, 1], [16, 18, 27, 24, 14, 21, 19, 30, 28, 4, 26, 29, 5, 23, 11, 20, 3, 22, 2, 13, 12, 17, 31, 10, 0, 6, 9, 25, 7, 15, 8, 1], [16, 18, 27, 24, 14, 21, 19, 30, 28, 4, 26, 29, 5, 23, 11, 20, 3, 12, 2, 13, 22, 17, 31, 10, 0, 6, 9, 25, 7, 15, 8, 1], [16, 18, 27, 24, 14, 21, 19, 30, 28, 4, 26, 29, 5, 23, 11, 20, 3, 12, 2, 13, 22, 17, 31, 10, 0, 6, 9, 25, 7, 15, 8, 1], [16, 18, 27, 24, 14, 21, 19, 30, 28, 4, 26, 29, 5, 23, 11, 20, 3, 12, 2, 13, 22, 31, 17, 10, 0, 6, 9, 25, 7, 15, 8, 1], [16, 18, 27, 24, 14, 21, 19, 30, 28, 4, 26, 29, 5, 23, 11, 20, 3, 12, 2, 13, 22, 31, 17, 10, 0, 6, 9, 25, 7, 15, 8, 1], [16, 18, 27, 24, 14, 21, 19, 30, 28, 4, 26, 29, 5, 23, 11, 20, 3, 12, 2, 13, 17, 22, 31, 10, 0, 6, 9, 25, 7, 15, 8, 1], [16, 18, 25, 24, 14, 21, 19, 30, 28, 4, 26, 29, 5, 23, 7, 20, 3, 22, 2, 13, 12, 17, 31, 10, 0, 6, 9, 1, 27, 11, 15, 8], [16, 18, 25, 24, 14, 21, 19, 30, 28, 4, 26, 31, 5, 23, 7, 20, 3, 22, 2, 13, 12, 17, 29, 10, 0, 6, 9, 1, 27, 15, 8, 11], [16, 18, 25, 24, 14, 21, 19, 30, 28, 4, 26, 29, 5, 23, 7, 20, 3, 31, 2, 13, 12, 17, 22, 10, 0, 6, 9, 27, 11, 15, 8, 1], [16, 18, 25, 24, 14, 21, 19, 30, 28, 4, 26, 29, 5, 23, 7, 20, 3, 12, 2, 13, 22, 17, 31, 10, 0, 6, 9, 1, 27, 11, 15, 8], [16, 18, 25, 24, 14, 21, 19, 30, 28, 4, 26, 29, 5, 23, 7, 20, 3, 22, 2, 27, 12, 17, 31, 10, 0, 6, 9, 1, 11, 13, 15, 8], [16, 18, 25, 24, 14, 21, 19, 30, 28, 4, 26, 29, 5, 23, 7, 20, 3, 22, 2, 13, 12, 17, 31, 10, 0, 6, 9, 27, 11, 15, 8, 1], [16, 23, 25, 24, 14, 21, 19, 30, 28, 4, 26, 29, 5, 18, 7, 20, 3, 22, 2, 13, 12, 17, 31, 10, 0, 6, 9, 1, 11, 15, 8, 27], [16, 18, 25, 24, 14, 21, 19, 30, 28, 4, 26, 29, 5, 23, 7, 20, 3, 22, 2, 13, 12, 17, 31, 10, 0, 6, 9, 1, 27, 11, 15, 8], [16, 18, 25, 24, 14, 21, 19, 30, 28, 4, 26, 29, 5, 23, 7, 20, 3, 22, 2, 13, 12, 17, 31, 10, 0, 6, 9, 1, 27, 15, 8, 11], [16, 18, 25, 24, 14, 21, 19, 30, 28, 4, 26, 29, 5, 23, 7, 20, 3, 27, 2, 13, 12, 17, 31, 10, 0, 6, 9, 1, 22, 11, 15, 8], [16, 18, 25, 24, 14, 21, 19, 30, 28, 4, 26, 29, 5, 23, 7, 20, 3, 22, 2, 13, 12, 17, 31, 10, 0, 6, 9, 1, 27, 11, 15, 8], [16, 18, 25, 24, 14, 21, 19, 30, 28, 4, 26, 29, 5, 23, 7, 20, 3, 22, 2, 13, 12, 17, 31, 10, 0, 6, 9, 27, 11, 15, 8, 1], [16, 18, 25, 24, 14, 21, 19, 30, 28, 4, 26, 29, 5, 23, 7, 20, 3, 22, 2, 13, 12, 17, 31, 10, 0, 6, 9, 1, 11, 27, 15, 8], [16, 18, 25, 24, 14, 21, 19, 30, 28, 4, 26, 29, 5, 23, 7, 20, 3, 22, 2, 13, 12, 17, 31, 10, 0, 6, 9, 1, 27, 11, 15, 8]]
[(0, 0.1927), (1, 0.1927), (2, 0.1927), (3, 0.1927), (4, 0.1927), (5, 0.1927), (6, 0.1927), (7, 0.1927), (8, 0.1927), (9, 0.1927), (10, 0.1927), (11, 0.1927), (12, 0.1927), (13, 0.1927), (14, 0.1927), (15, 0.1927), (16, 0.1927), (17, 0.1927), (18, 0.1927), (19, 0.1927), (20, 0.1927), (21, 0.1927), (22, 0.1927), (23, 0.1927), (24, 0.1927)]
pop size = 100
mut rate = 0.9/0.09


"""
"""
#N = tabu_search(M)
    #print(N)
    #flat_list = []
    #for sublist in N:
     #   for item in sublist:
      #      flat_list.append(item)
#print(A)
flat_list2 = []
for sublist in A:
    for item in sublist:
        if type(item) == list:
            flat_list2.append(item)
#print(flat_list2)
"""